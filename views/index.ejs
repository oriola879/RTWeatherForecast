<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Weather App</title>
</head>
<body>
  <h1>Weather App</h1>
  <form id="locationForm">
    <label for="location">Location:</label>
    <input type="text" id="location" name="location" required>
    <br>
    <div id="autocompleteResults"></div> <!-- Container for autocomplete suggestions -->
    <button type="submit">Get Weather</button>
  </form>
  <pre id="weatherData"></pre>

  <script>
    document.getElementById('locationForm').addEventListener('submit', async (event) => {
      event.preventDefault(); // Prevent default form submission

      // Get the location value from the input field
      const location = document.getElementById('location').value.trim();
      
      try {
        // Fetch weather data based on the selected location
        const response = await fetch('/weather/' + encodeURIComponent(location));
        
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        
        // Parse the JSON response
        const weatherData = await response.json();
        
        // Render weather data on the page
        document.getElementById('weatherData').textContent = JSON.stringify(weatherData, null, 2);
      } catch (error) {
        console.error('Error fetching weather data:', error);
        // Display an error message on the page
        document.getElementById('weatherData').textContent = 'Error fetching weather data';
      }
    });

    // Add logic to fetch and display autocomplete suggestions
    document.getElementById('location').addEventListener('input', async (event) => {
      const input = event.target.value.trim(); // Trim whitespace from input
      if (input.length < 3) {
        document.getElementById('autocompleteResults').innerHTML = ''; // Clear autocomplete results if input is too short
        return;
      }
      try {
        const response = await fetch('/weather/autocomplete/' + encodeURIComponent(input));
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const suggestions = await response.json();
        document.getElementById('autocompleteResults').innerHTML = suggestions.predictions.map(prediction => '<div>' + prediction.description + '</div>').join('');
      } catch (error) {
        console.error('Error fetching autocomplete suggestions:', error);
      }
    });

    // Add logic to handle autocomplete selection
    document.getElementById('autocompleteResults').addEventListener('click', (event) => {
      if (event.target.tagName === 'DIV') {
        document.getElementById('location').value = event.target.textContent;
        document.getElementById('autocompleteResults').innerHTML = ''; // Clear autocomplete results
      }
    });
  </script>
</body>
</html>

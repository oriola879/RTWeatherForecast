<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="styles.css">

    <title>Home</title>
    <link rel="icon" href="icon.png" type="image/png">
</head>

<body>
<nav class="navbar navbar-expand-lg navbar-light bg-info fixed-top">
    <a class="navbar-brand" href="#"><strong>Weather Forecast / Home</strong></a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ml-auto">
            <li class="nav-item">
                <a class="nav-link" href="/"><strong>Home</strong></a>
            </li>
            <% if (user) { %>
                <li class="nav-item dropdown">
                    <a class="btn btn-primary dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        My Account
                    </a>
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="/account">Account</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="/logout">Logout</a>
                    </div>
                </li>
            <% } else { %>
                <li class="nav-item">
                    <a class="btn btn-primary" href="/login"><Strong>Login</Strong></a>
                </li>
            <% } %>
        </ul>
    </div>
</nav>

<section class="d-flex justify-content-center align-items-start full-height-no-scroll">
    <div class="w-75 d-flex flex-column align-items-center justify-content-center px-4 py-5 mx-auto">
        <p href="/" class="d-flex align-items-center mt-2 mb-4 fs-2 fw-semibold text-dark">
            <% if (user) { %>
        <h2>Welcome, <%= user.userName %>!</h2>
        <% } %>
        </p>
        <div class="w-100 bg-white rounded-lg shadow border p-4">
            <div class="p-4">
                <h1 class="fs-4 fw-bold text-dark">
                    Get weather update!
                </h1>
                <form id="locationForm" class="mt-4" action="" method="GET">
                    <label for="location">Location:</label>
                    <input type="text" id="location" name="location" placeholder="Search location..." class="form-control" required>
                    <div id="autocompleteResults" class="autocomplete-results"></div> <!-- Container for autocomplete suggestions -->
                    <button type="submit" class="btn btn-primary mt-2">Get Weather</button>
                </form>
                <div id="weatherResult" class="mt-4 row"></div> <!-- Container for weather cards (row for Bootstrap grid) -->
            </div>
        </div>
    </div>
</section>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();

    document.getElementById('locationForm').addEventListener('submit', async (event) => {
        event.preventDefault();

        const location = document.getElementById('location').value.trim();
        if (location.length < 3) {
            return;
        }

        try {
            const response = await fetch('/weather/' + encodeURIComponent(location));
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const weatherData = await response.json();
            displayWeather(weatherData.locations[location].values);

            socket.emit('newWeatherData', { location, weatherData });
        } catch (error) {
            console.error('Error fetching weather data:', error);
        }
    });

    document.getElementById('location').addEventListener('input', async (event) => {
        const input = event.target.value.trim();
        if (input.length < 3) {
            document.getElementById('autocompleteResults').innerHTML = '';
            return;
        }
        try {
            const response = await fetch('/weather/autocomplete/' + encodeURIComponent(input));
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const suggestions = await response.json();
            document.getElementById('autocompleteResults').innerHTML = suggestions.predictions.map(prediction => '<div>' + prediction.description + '</div>').join('');
        } catch (error) {
            console.error('Error fetching autocomplete suggestions:', error);
        }
    });

    document.getElementById('autocompleteResults').addEventListener('click', (event) => {
        if (event.target.tagName === 'DIV') {
            document.getElementById('location').value = event.target.textContent;
            document.getElementById('autocompleteResults').innerHTML = '';
        }
    });

    function getWeatherIcon(condition) {
        const conditionLower = condition.toLowerCase();
        if (conditionLower.includes('sunny') || conditionLower.includes('clear')) {
            return '<i class="fas fa-sun weather-icon"></i>';
        } else if (conditionLower.includes('cloud')) {
            return '<i class="fas fa-cloud weather-icon" ></i>';
        } else if (conditionLower.includes('rain')) {
            return '<i class="fas fa-cloud-showers-heavy weather-icon" ></i>';
        } else if (conditionLower.includes('snow')) {
            return '<i class="fas fa-snowflake weather-icon" ></i>';
        } else if (conditionLower.includes('storm')) {
            return '<i class="fa-solid fa-bolt weather-icon"></i>';
        } else {
            return '<i class="fas fa-cloud-sun weather-icon" ></i>'; // default icon
        }
    }

    function displayWeather(data) {
        const weatherResult = document.getElementById('weatherResult');
        weatherResult.innerHTML = '';

        // Iterate over each day's weather data, except the last one
        for (let i = 0; i < data.length - 1; i++) {
            const day = data[i];

            const date = new Date(day.datetime);
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            const formattedDate = date.toLocaleDateString('en-US', options);
            const weatherIcon = getWeatherIcon(day.conditions);

            let weatherClass = 'weather-default';
            if (day.conditions.toLowerCase().includes('sunny') || day.conditions.toLowerCase().includes('clear')) {
                weatherClass = 'weather-sunny';
            } else if (day.conditions.toLowerCase().includes('cloud')) {
                weatherClass = 'weather-cloudy';
            } else if (day.conditions.toLowerCase().includes('rain')) {
                weatherClass = 'weather-rainy';
            } else if (day.conditions.toLowerCase().includes('snow')) {
                weatherClass = 'weather-snowy';
            } else if (day.conditions.toLowerCase().includes('storm')) {
                weatherClass = 'weather-stormy';
            }

            const cardHtml = `
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card text-center text-white">
                    <div class="card-body ${weatherClass}">
                        <p class="card-title">${weatherIcon}</p>
                        <h5 class="card-text">${formattedDate}</h5>
                        <h1 class="card-text">${day.temp}&deg;C</h1>
                        <p class="card-text">H: ${day.maxt}&deg;C L: ${day.mint}&deg;C</p>
                        <p class="card-text">${day.conditions}</p>
                        <p class="card-text">Humidity: ${day.humidity}%</p>
                        <p class="card-text">Cloud cover: ${day.cloudcover}%</p>
                        <p class="card-text">Windspeed: ${day.wspd} km/h</p>
                        <p class="card-text">Chance of Precipitation: ${day.pop}%</p>
                    </div>
                </div>
            </div>
        `;
            weatherResult.insertAdjacentHTML('beforeend', cardHtml);
        }
    }
</script>
</body>
</html>

